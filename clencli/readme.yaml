logo:
  url: https://images.unsplash.com/photo-1607451845255-2f7de5e407e3?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MXwxOTEyNTB8MHwxfHJhbmRvbXx8fHx8fHx8&ixlib=rb-1.2.1&q=80&w=1080
  label: Logo
shields:
  badges:
  - description: GitHub issues
    image: https://img.shields.io/github/issues/awslabs/clencli
    url: https://github.com/awslabs/clencli/issues
  - description: GitHub forks
    image: https://img.shields.io/github/forks/awslabs/clencli
    url: https://github.com/awslabs/clencli/network
  - description: GitHub stars
    image: https://img.shields.io/github/stars/awslabs/clencli
    url: https://github.com/awslabs/clencli/stargazers
  - description: GitHub license
    image: https://img.shields.io/github/license/awslabs/clencli
    url: https://github.com/awslabs/clencli/blob/master/LICENSE
  - description: Twitter
    image: https://img.shields.io/twitter/url?style=social&url=https%3A%2F%2Fgithub.com%2Fawslabs%2Fclencli
    url: https://twitter.com/intent/tweet?text=Wow:&url=https%3A%2F%2Fgithub.com%2Fawslabs%2Fclencli
app:
  name: Cloud Engineer CLI
  function: A CLI built to assist Cloud Engineers.
  id: clencli
usage: "CLENCLI enables you to quickly and predictably create, change, and improve
  your cloud projects by automating common tasks such as creating a new project, or
  updating its documentation.\nModern software projects are composed of many repositories,
  and often worked upon by many development teams. Keeping consistency across the
  project is key to enable productivity and efficiency.\nIn a polyglot world where
  a team can choose it's programming language, often this flexibility can spill into
  chaos as every repo looks different. CLENCLI solves this issue by giving developers
  a quick and easy way to create a standardised repo structure and easily rendering
  documentation via a YAML file.\n\n### Create a new project\n```\n  $ clencli init
  project --project-name foo\n  $ tree -a moon/\n  foo/\n  ├── clencli\n  │   ├──
  readme.tmpl\n  │   └── readme.yaml\n  └── .gitignore\n```\n\n### Create a new CloudFormation
  project\n```\n$ clencli init project --project-name foo --project-type cloudformation\n$
  tree -a sun/\n  foo/\n  ├── clencli\n  │   ├── hld.tmpl\n  │   ├── hld.yaml\n  │  
  ├── readme.tmpl\n  │   └── readme.yaml\n  ├── environments\n  │   ├── dev\n  │  
  └── prod\n  ├── .gitignore\n  ├── skeleton.json\n  └── skeleton.yaml\n```\n\n###
  Create a new Terraform project\n```\n$ clencli init project --project-name foo --project-type
  terraform\n$ tree -a foo/\nfoo/\n├── clencli\n│   ├── hld.tmpl\n│   ├── hld.yaml\n│  
  ├── readme.tmpl\n│   └── readme.yaml\n├── environments\n│   ├── dev.tf\n│   └──
  prod.tf\n├── .gitignore\n├── LICENSE\n├── main.tf\n├── Makefile\n├── outputs.tf\n└──
  variables.tf\n```\n\n## Render a template\n```\n$ clencli init project --project-name
  foo\nfoo was successfully initialized as a basic project\n$ cd foo/\n$ clencli render
  template\nTemplate readme.tmpl rendered as README.md\n```\n\nThe `README.md` you
  are reading right now was generated and it's maintained by `CLENCLI` itself. You
  can check [readme.yaml](clencli/readme.yaml) for more details. Every time the `README.md`
  is updated, a new photo is chosen for the project automatically.\n\n## Download
  random photos from [Unsplash](https://unsplash.com)\n```\n# first you need to inform
  your unsplash developer API credentials\n\n$ clencli configure\nclencli configuration
  directory created at /home/valter/.clencli\nWould you like to setup credentials?
  [false]: true\n> Credentials\n>> Profile: default\n>>>> Credential\n>>>>> Name:
  default\n>>>>> Description:   \n>>>>> Enabled [true]: \n>>>>> Provider: unsplash\n>>>>>
  Access Key []: XXX\n>>>>> Secret Key []: XXX\n>>>>> Session Token []: \nWould you
  like to setup another credential? [false]: \nWould you like to setup configurations?
  [false]:\n\n$ clencli unsplash\ntree -a downloads/\ndownloads/\n└── unsplash\n    └──
  mountains\n        ├── 3gz2hsA1T3s-full.jpeg\n        ├── 3gz2hsA1T3s-raw.jpeg\n
  \       ├── 3gz2hsA1T3s-regular.jpeg\n        ├── 3gz2hsA1T3s-small.jpeg\n        └──
  3gz2hsA1T3s-thumb.jpeg\n\n$ clencli unplash --query dog\nclencli unsplash --query
  dog --size full\ntree -a downloads/\ndownloads/\n└── unsplash\n    └── dog\n        └──
  bbjSWtDtHbM.jpeg\n```\n\n## Download a .gitignore for your project\n```\n$ clencli
  gitignore --input terraform,vscode\n.gitignore created successfully\n$ less .gitignore\n\n#
  Created by https://www.toptal.com/developers/gitignore/api/terraform,vscode\n# Edit
  at https://www.toptal.com/developers/gitignore?templates=terraform,vscode\n\n###
  Terraform ###\n# Local .terraform directories\n**/.terraform/*\n\n# .tfstate files\n*.tfstate\n*.tfstate.*\n\n#
  Crash log files\ncrash.log\n\n# Ignore any .tfvars files that are generated automatically
  for each Terraform run. Most\n# .tfvars files are managed as part of configuration
  and so should be included in\n# version control.\n#\n# example.tfvars\n\n# Ignore
  override files as they are usually used to override resources locally and so\n#
  are not checked in\noverride.tf\noverride.tf.json\n*_override.tf\n*_override.tf.json\n\n#
  Include override files you do wish to add to version control using negated pattern\n#
  !example_override.tf\n\n# Include tfplan files to ignore the plan output of command:
  terraform plan -out=tfplan\n# example: *tfplan*\n\n### vscode ###\n.vscode/*\n!.vscode/settings.json\n!.vscode/tasks.json\n!.vscode/launch.json\n!.vscode/extensions.json\n*.code-workspace\n\n#
  End of https://www.toptal.com/developers/gitignore/api/terraform,vscode\n```\n"
installing: Download the latest version [released](https://github.com/awslabs/clencli/releases)
  according to your platform and execute it directly. I recommend placing the binary
  into your `$PATH`, so it's easily accessible.
include:
- COMMANDS.md
contributors:
- name: Silva, Valter
  role: AWS Professional Services - Cloud Architect
  email: '-'
acknowledgments:
- name: Sia, William
  role: AWS Professional Service - Senior Cloud Architect
- name: Dhingra, Prashit
  role: AWS Professional Service - Cloud Architect
references:
- description: Cobra is both a library for creating powerful modern CLI applications
    as well as a program to generate applications and command files.
  name: cobra
  url: https://github.com/spf13/cobra
- description: Viper is a complete configuration solution for Go applications including
    12-Factor apps.
  name: viper
  url: https://github.com/spf13/viper
- description: The Twelve-Factor App
  name: twelve-factor-app
  url: https://12factor.net
- description: gomplate is a template renderer which supports a growing list of datasources,
    such as JSON (including EJSON - encrypted JSON), YAML, AWS EC2 metadata, BoltDB,
    Hashicorp Consul and Hashicorp Vault secrets.
  name: gomplate
  url: https://github.com/hairyhenderson/gomplate
- description: The most powerful photo engine in the world.
  name: unsplash
  url: https://unsplash.com
- description: The Free Image Placeholder Service Favoured By Designers
  name: placeholder
  url: https://placeholder.com
- description: The best Lorem Ipsum Generator in all the sea
  name: pirate-ipsum
  url: https://pirateipsum.me
- description: Record Fast Screencasts
  name: recordit
  url: https://recordit.co
- description: A terminal-to-gif recorder minus the headaches.
  name: ttystudio
  url: https://github.com/chjj/ttystudio
- description: GitHub Super Linter
  name: gihub-super-linter
  url: https://github.com/github/super-linter
- description: GitHub Actions
  name: github-actions
  url: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/introduction-to-github-actions
- description: Create useful .gitignore files for your project
  name: gitignore.io
  url: https://www.toptal.com/developers/gitignore
license: This project is licensed under the Apache License 2.0.
copyright: Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
